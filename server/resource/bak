# -*- coding: UTF-8 -*-
from flask import Flask,jsonify,request,Response
from dao.page_content import PageContent
from dao.user_video import UserVideo
from dao.video import Video
from dao.base import BaseDao
from dao.user_behavior import UserBehavior
from lib.log import get_logger
from lib.tool import validSqlInject
from lib.config import read_server_config
from dao.user import User
from dao.billboard import Billboard
from lib.tool import get_user_id
from service.comment_service import CommentService
from service.video_service import VideoService
from service.version_service import VersionService
from service.docker_name_service import DockerRouter

import sys
import logging
import traceback
import time
import urllib
import zerorpc
import time
from gevent.pywsgi import WSGIServer
from gevent import monkey
monkey.patch_all()

logger = get_logger('main')

app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False
reload(sys)
sys.setdefaultencoding('utf-8')

@app.route('/content')
def main_page_content():
    logger.info('rec a content request')
    user = request.args.get("userid")
    if not user:
        logger.info('fail|user arg not found, return')
        return jsonify({'code':-1, 'msg':'need userid'})
    if len(user) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})
    logger.info('userid:%s' % user)
    pc = PageContent()
    content = {}
    try:
        content = pc.get_main_page_content(user)

        logger.info('success|content request serve success')
    except:
        logger.error('fail|exception|content request serve error|%s' % traceback.format_exc())
    finally:
        pc.close()

    return jsonify(content)

@app.route('/pagecontent')
def get_content_by_cate_and_page():
    logger.info('rec a content request')
    layer = request.args.get("layer")
    category = request.args.get("category")
    page = request.args.get("page")
    if not (layer and category and page):
        logger.info('fail|layer,category,page args not found, return')
        return jsonify({'code':-1, 'msg':'need userid'})
    pc = PageContent()
    content = {}
    try:
        content = pc.get_content_by_cate_and_page(layer, category, page)
        logger.info('success|content request serve success')
    except:
        logger.error('fail|exception|content request serve error|%s' % traceback.format_exc())
    finally:
        pc.close()

    return jsonify(content)


@app.route('/ub', methods=['GET', 'POST'])
def ub():
    logger.info('rec a ub request')
    data = request.json
    uid = data.get('userid')
    vid = data.get('id')
    if validSqlInject(vid) or validSqlInject(uid):
        return jsonify({'code':1, 'msg':'invalid param'})
    if not (uid and vid):
        logger.info('fail|userid or vid is null, return')
        return jsonify({'code':-1, 'msg':'need userid and vid'})
    if len(uid) > 32 or len(vid) > 32:
        logger.info('fail|userid or vid is invalid,userid:%s,vid:%s return' %(uid, vid))
        return jsonify({'code':-1, 'msg':'userid and vid invalid.'})
    duration = data.get('duration') or 0

    b = BaseDao()
    try:
        uv = UserVideo(base=b)
        v_dao = Video(base=b)
        uv.add_item(uid, vid, int(time.time()), duration)
        v_dao.add_play_count(vid)
        logger.info('success|ub request serve success')
    except:
        logger.error('fail|exception|ub request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    return jsonify({'code':0, 'msg':'success'})

@app.route('/uid')
def uid():
    logger.info('rec a uid request')
    res = {'code':1,'msg':'success', 'uid':'unkown'}

    b = BaseDao()
    try:
        user_dao = User(base=b)
        macid = request.args.get("macid") or ''
        androidid = request.args.get("androidid") or ''
        if validSqlInject(macid) or validSqlInject(androidid):
            return jsonify({'code':1, 'msg':'invalid param'})

        if macid or androidid:
            user = user_dao.get_user_info(macid, androidid)
            if not user:
                uid = get_user_id(macid, androidid)
                user_dao.add_user_id(uid, macid, androidid)
            else:
                uid = user.user_id

            res['uid'] = uid
        else:
            res['uid'] = get_user_id()

        logger.info('success|uid request serve success')
    except:
        logger.error('fail|exception|uid request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    return jsonify(res)

@app.route('/billboard', methods=['GET'])
def billboard():
    logger.info('rec a billboard request')
    res = {'code':1,'msg':'success', 'qr':'', 'notice':''}

    b = BaseDao()
    try:
        bb_dao = Billboard(base=b)
        bb = bb_dao.get_billboard_info()
        logger.info('success|billboard request serve success')
    except:
        logger.error('fail|exception|billboard request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    res['qr'] = bb.qr_url
    res['notice'] = bb.notice
    return jsonify(res)

@app.route('/history', methods=['GET'])
def history():
    logger.info('rec a history request')
    res = {'code':1,'msg':'success', 'content':{}}
    userid = request.args.get("userid") or ''
    if not userid:
        res['code'] = 0
        res['msg']  = 'need userid'
        return jsonify(res)
    if validSqlInject(userid):
        return jsonify({'code':1, 'msg':'invalid param'})

    if len(userid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    content = {}
    itemList = []
    content['itemList'] = itemList
    b = BaseDao()
    try:
        ub = UserBehavior(userid, b)
        for v_obj in ub.get_video_items():
            #v_obj = assemble(item)
            itemList.append(v_obj)

        res['content'] = content
        logger.info('success|history request serve success')
    except:
        logger.error('fail|exception|history request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    return jsonify(res)

@app.route('/delhistory', methods=['GET'])
def del_history():
    logger.info('rec a delhistory request')
    res = {'code':1,'msg':'success'}
    userid = request.args.get("userid") or ''
    vid = request.args.get("vid") or ''
    if not (userid and vid):
        res['code'] = 0
        res['msg']  = 'need userid and vid'
        return jsonify(res)
    if len(userid) > 32 or len(vid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    b = BaseDao()
    ub = UserBehavior(userid, b)
    try:
        ub.del_video_history(vid)
        logger.info('success|delhistory request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|delhistory request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    return jsonify(res)

@app.route('/delallhistory', methods=['GET'])
def del_all_history():
    logger.info('rec a delallhistory request')
    res = {'code':1,'msg':'success'}
    userid = request.args.get("userid") or ''
    if not userid:
        res['code'] = 0
        res['msg']  = 'need userid'
        return jsonify(res)
    if len(userid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    b = BaseDao()
    ub = UserBehavior(userid, b)
    try:
        ub.del_all_video_history()
        logger.info('success|delallhistory request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|delallhistory request serve error|%s' % traceback.format_exc())
    finally:
        b.close()

    return jsonify(res)

# 获取评论配置接口
@app.route('/list/comment', methods=['POST'])
def list_comment():
    logger.info('rec a list_comment request')
    res    = {'code' : 0, 'msg' : 'success', 'list' : ''}
    data   = request.json
    userid = data.get("userid") or ''
    if not userid:
        res['code'] = -1
        res['msg']  = 'need userid'
        return jsonify(res)
    if len(userid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    service = CommentService()
    try:
        result      = service.get_base_comment()
        res['list'] = result
        logger.info('success|list_comment request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|list_comment request serve error|%s' % traceback.format_exc())
    finally:
        service.close()

    return jsonify(res)

# 评论视频接口
@app.route('/user/add/video/comment', methods=['POST'])
def add_comment():
    logger.info('rec a add_comment request')
    res          = {'code' : 0, 'msg' : 'success'}
    data         = request.json
    vid          = data.get("vid") or ''
    content      = data.get("content") or ''
    userid       = data.get("userid") or ''
    uname        = data.get("uname") or ''
    comment_time = data.get("comment_time") or ''

    if not userid or not vid or not comment_time or not content:
        res['code'] = -1
        res['msg']  = 'need userid、vid、comment time、comment content'
        return jsonify(res)
    if len(userid) > 32 or len(vid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    service = CommentService()
    try:
        service.add_video_comment(vid, content, userid, comment_time, uname)
        logger.info('success|add_comment request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|add_comment request serve error|%s' % traceback.format_exc())
    finally:
        service.close()

    return jsonify(res)

# 弹幕接口
@app.route('/user/display/video/comment', methods=['POST'])
def display_comment():
    logger.info('rec a display_comment request')
    res    = {'code' : 0, 'msg' : 'success', 'xml': ''}
    data   = request.json
    vid    = data.get("vid") or ''
    userid = data.get("userid") or ''

    if not userid or not vid:
        res['code'] = 1
        res['msg']  = 'need userid、vid'
        return jsonify(res)

    if len(userid) > 32 or len(vid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    service = CommentService()
    try:
        xml = service.get_video_comment(vid)
        if (xml == ''):
            res['code'] = 1
            res['msg']  = '该视频不存在评论'
        else:
            res['xml'] = xml
        logger.info('success|display_comment request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|display_comment request serve error|%s' % traceback.format_exc())
    finally:
        service.close()

    return jsonify(res)


# 点赞接口
@app.route('/user/praise/video', methods=['POST'])
def user_praise():
    logger.info('rec a user_praise request')
    res    = {'code' : 0, 'msg' : 'success'}
    data   = request.json
    vid    = data.get("vid") or ''
    userid = data.get("userid") or ''

    if not userid or not vid:
        res['code'] = 1
        res['msg']  = 'need userid、vid'
        return jsonify(res)
    if len(userid) > 32 or len(vid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    service = VideoService()
    try:
        service.add_video_good(vid)
        logger.info('success|user_praise request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|user_praise request serve error|%s' % traceback.format_exc())
    finally:
        service.close()

    return jsonify(res)

# 版本更新接口
@app.route('/version/update', methods=['POST'])
def version_update():
    logger.info('rec a version_update request')
    res          = {'code' : 0, 'msg' : 'success', 'url': '', 'force': 0}
    data         = request.json
    userid       = data.get("userid") or ''
    version_code = data.get("version_code") or 0

    if not userid or version_code == 0:
        res['code'] = 1
        res['msg']  = 'need userid and version code'
        return jsonify(res)

    if len(userid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    service = VersionService()
    try:
        (res['url'], res['force']) = service.get_update(version_code)
        logger.info('success|version_update request serve success')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|version_update request serve error|%s' % traceback.format_exc())
    finally:
        service.close()

    return jsonify(res)

# 语音转文字接口代理
@app.route('/voice/request/to/text', methods=['POST'])
def voice_to_text():
    logger.info('rec a voice convert text request')
    res        = {'code' : 0, 'msg' : 'success'}
    data       = request.json
    userid     = data.get("userid") or ''
    voice_data = data.get("voice_data") or ''

    if not userid or not voice_data:
        res['code'] = 1
        res['msg']  = 'need userid and voice data'
        return jsonify(res)

    if len(userid) > 32:
        logger.info('fail|user arg invalid, return')
        return jsonify({'code':-1, 'msg':'userid invalid'})

    client = zerorpc.Client()
    try:
        router     = DockerRouter()
        (ip, port) = router.get_router('Voice', 'VoiceService')
        client.connect('tcp://{0}:{1}'.format(ip, port))
        if (client.sng_voice(voice_data) == True):
            logger.info('success|voice to text request success')
        else:
            res['code'] = 1
            res['msg']  = '操作失败'
            logger.info('failure|voice to text request failure')
    except:
        res['code'] = 1
        res['msg']  = '操作失败'
        logger.error('fail|exception|voice to text request serve error|%s' % traceback.format_exc())
    finally:
        client.close()

    return jsonify(res)

# 语音转文字腾讯云回调地址代理
# 这个接口和腾讯云语音识别有关，因此里面的返回信息和自身业务有区别
@app.route('/voice/callback', methods=['POST'])
def voice_callback():
    logger.info('rec a voice convert text callback request')
    res        = {'code' : 0, 'message' : 'success'}

    logger.info('form data => {0}'.format(request.form))

    return_code = int(request.form.get('code', 1))
    message     = urllib.unquote(request.form.get('message', 'defaule value'))
    requestId   = request.form.get('requestId', 0)
    appid       = request.form.get('appid', 0)
    projecteid  = request.form.get('projecteid', 0)
    text        = urllib.unquote(request.form.get('text', 'defaule value'))
    audioTime   = request.form.get('audioTime', 0)

    client = zerorpc.Client()
    try:
        router     = DockerRouter()
        (ip, port) = router.get_router('Voice', 'VoiceService')
        client.connect('tcp://{0}:{1}'.format(ip, port))
        if (return_code == 0 and client.sng_voice_callback(requestId, text, audioTime) == True):
            logger.info('success|voice to text callback success')
        else:
            res['code']     = 1
            res['message']  = '操作失败'
            logger.info('failure|voice to text callback failure')
    except:
        res['code']     = 1
        res['message']  = '操作失败'
        logger.error('fail|exception|voice to text callback serve error|%s' % traceback.format_exc())
    finally:
        client.close()

    return jsonify(res)



@app.route('/')
def hi():
    return 'Hi'


def main():
    "Start gevent WSGI server"
    # use gevent WSGI server instead of the Flask
    s_conf = read_server_config()
    http = WSGIServer((s_conf['host'], s_conf['port']), app.wsgi_app)
    # TODO gracefully handle shutdown
    http.serve_forever()

if __name__ == "__main__":
    main()


def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    logger.error("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))

sys.excepthook = handle_exception
